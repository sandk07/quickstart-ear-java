task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

buildscript {
    repositories {
        mavenLocal()
        //mavenCentral()
    }
    dependencies {
        classpath 'com.github.kulya:jmeter-gradle-plugin:1.3.2-2.6'
    }
}

apply plugin:'jmeter'
def performanceTestReportDir = file("$buildDir/reports/tests")

jmeterRun.configure {

  jmeterTestFiles = [ file("$rootDir/ear/src/test-performance/resources/jmeter/performanceTestPlan.jmx")]
  jmeterPropertyFile = file("$rootDir/ear/src/test-performance/resources/jmeter/jmeter.properties")
  jmeterUserProperties = ["host="+config.server.hostname,"port="+config.server.port,"path="+appName]

  reportDir  = performanceTestReportDir
}
    
project(':ear'){
  def buildVersion = version

  apply plugin: 'ear'
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'pmd'
  apply plugin: "jdepend"  
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: 'com.bmuschko.cargo'

  repositories { 
    mavenLocal()

    /*maven {
        url binaryRepositoryJCenterLocalUrl
        credentials {
            username = binaryRepositoryUserName
            password = binaryRepositoryPassword
        }
    }
    mavenCentral()

    maven {
        url binaryRepositoryMavenLocalUrl
        credentials {
            username = binaryRepositoryUserName
            password = binaryRepositoryPassword
        }
    }

    jcenter()   

    maven { url "http://repo.maven.apache.org/maven2" }*/
   
  }

  dependencies {
       
    deploy project(':ear:app-ejb') 
    deploy project(':ear:app-vos') 
    deploy project(path: ':ear:app-web', configuration: 'archives') 
    earlib group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
        
    cargo 'org.wildfly:wildfly-controller-client:8.0.0.Final'
    cargo 'org.codehaus.cargo:cargo-ant:1.4.15' 

    compile 'org.seleniumhq.selenium:selenium-java:2.46.0'
    compile 'org.testng:testng:6.8'

  }

  sourceSets {
    integrationTest {
      java.srcDir file("src/test-integration/java")
      resources.srcDir file("src/test-integration/resources")
      compileClasspath = sourceSets.main.output + configurations.testRuntime
      runtimeClasspath = output + compileClasspath
    }
    performanceTest {
      java.srcDir file("src/test-performance/java")
      resources.srcDir file("src/test-performance/resources")
      compileClasspath = sourceSets.main.output + configurations.testRuntime
      runtimeClasspath = output + compileClasspath
    }
    functionalTest {
      java.srcDir file("src/test-functional/java")
      resources.srcDir file("src/test-functional/resources")
      compileClasspath = sourceSets.main.output + configurations.testRuntime
      runtimeClasspath = output + compileClasspath
    }
  }

  task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
  } 

  ear {
    dependsOn createBuildInfoFile
    appDirName 'src/main/app'  
    libDirName 'APP-INF/lib'
    baseName = appName

    from(buildDir) {
      include 'build-info.properties'
      into('APP-INF')
    }

    deploymentDescriptor {  
      fileName = "application.xml"  
      applicationName = appName
      initializeInOrder = true
      displayName = appName
      description = "My customized EAR for the Gradle documentation"

      module("app-vos-"+buildVersion+".jar", "java")  
      webModule("app-web-"+buildVersion+".war", "/"+appName)
    }
  }

  pmd {
    ignoreFailures = true
  }

  tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
  }

  jdepend {
    toolVersion = '2.9.1'
    ignoreFailures = true
  }

  /*sonarRunner {
      sonarProperties {
        property "sonar.host.url", sonarHostUrl
        property "sonar.jdbc.url", sonarJdbcUrl
        property "sonar.jdbc.driverClassName", sonarJdbcDriverClassName
        property "sonar.jdbc.username", sonarJdbcUserName
        property "sonar.jdbc.password", sonarJdbcPassword
      }
  }
  subprojects {
    sonarRunner {
      sonarProperties {
        property "sonar.sourceEncoding", "UTF-8"
      }
    }
  } */


  task myZip(type: Zip) {
    from "$buildDir/reports/tests/"
  }

  publishing {
    publications {
        webApp(MavenPublication) {
          groupId mavenGroupId
          artifactId appName
          version version
          artifact(ear){

          }
        }
        functionalReports(MavenPublication){
          groupId mavenGroupId
          artifactId "FunctionalReports"
          version version
          artifact(myZip) {
            classifier "reports"
          }
        }
        performanceReports(MavenPublication){
          groupId mavenGroupId
          artifactId "PerformanceReports"
          version version
          artifact(myZip) {
            classifier "reports"
          }
        } 
    }

    repositories {
        maven {
            url releasesRepoPath
            credentials {
                username = repoUserName
                password = repoPassword
            }
        }
    }
  }
  repositories {
    maven {
        url releasesRepoPath 
    }
  }
  configurations {
    downloadEar
  }
  println "$mavenGroupId:$appName:$project.version@ear"
  dependencies {      
    downloadEar ("$mavenGroupId:$appName:$project.version@ear"){ 
      artifact {
        name = "$appName"
        extension = 'ear'
        type = 'ear'
      }
    }
  }

  task downloadBinaryArchive(type: Copy) {        
    from configurations.downloadEar
    into "$buildDir\\libs"      
  }

  cargo {

    containerId = config.server.containerId
    port = config.server.port

    deployable {
      def fileName = appName+"-"+buildVersion
      def filePath = "$buildDir/libs/$fileName"+".ear"
      file = new File ("$buildDir/libs/$fileName"+".ear")
    }  

      //  local {
         // homeDir = file(config.server.localHomeDir)
       // }
  }

  task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    
  }

  task performanceTest(type: Test , dependsOn: jmeterRun ) {
    description = 'Runs the performance tests.'
    group = 'verification'
    testClassesDir = sourceSets.performanceTest.output.classesDir
    classpath = sourceSets.performanceTest.runtimeClasspath
  }

  task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    systemProperty 'url', "$config.server.hostname:$config.server.port/$appName/"
    useTestNG(){
        suites 'src/test-functional/resources/testing.xml'
    }
  }
}